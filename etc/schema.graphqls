# Copyright 2023 Adobe, Inc. All rights reserved.
# See LICENSE for license details.

type Query {
    dataInstallerLogs(
        jobId: String @doc(description: "id of job if import was done via admin ui. If used, datapack value is ignored") 
        datapack: String @doc(description: "datapack installed, uses instring comparison, so full path of data pack is not needed")
    ): DataIntstallerLog @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\DataInstall\\DataInstallLog") @doc(description:"Get log data for a Data Installer Job")
    dataInstallerJobStatus(
        jobId: String @doc(description: "id of job") 
    ): DataIntstallerJobStatus @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\DataInstall\\DataInstallJobStatus") @doc(description:"Get status information about a Data Installer Job")
    customerGroups(
        identifiers: [String] @doc(description: "Names or Ids of Groups") 
    ): CustomerGroups @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\CustomerGroups") @doc(description:"Array of customer groups")
    customerSegments(
        identifiers: [String] @doc(description: "Names or IDs of segments") 
    ): CustomerSegments @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\CustomerSegments") @doc(description:"Array of customer segments")
    cartRules(
        identifiers: [String] @doc(description: "Names or IDs of cart rules") 
    ): CartRules @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Marketing\\CartRules") @doc(description:"Array of cart rules")
    catalogRules(
        identifiers: [String] @doc(description: "Names or IDs of catalog rules") 
    ): CatalogRules @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Marketing\\CatalogRules") @doc(description:"Array of catalog rules")
    cmsPages(
        identifiers: [String] @doc(description: "Identifiers or IDS of the CMS pages")
        retainStoreScope: [Boolean] @doc(description: "Optional: If true, will return store_view_code as set for the page. If false, it will set to the store_view_code of the request. Default is false.")
    ): CmsPages @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\Pages") @doc(description: "Get CMS Pages from store.")
    cmsBlocksList: CmsBlocks @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\BlocksList") @doc(description: "Get CMS Pages from store.")
    msiSource(
        identifiers: [String] @doc(description: "Code of the Msi Source")
    ): MsiSources @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Inventory\\MsiSource") @doc(description: "Get Msi Sources.")
    msiStock(
        identifiers: [String] @doc(description: "Names or Ids of the Msi Stock")
    ): MsiStocks @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Inventory\\MsiStock") @doc(description: "Get Msi Stocks.")
    rewardsPointsExchangeRate(
        identifiers: [String] @doc(description: "Ids of Echange Rates")
    ): RewardPointsRateList @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\RewardExchangeRates") @doc(description: "Get Rewards Exchange Rates")
    upsells(
        identifiers: [String] @doc(description: "Names or IDs of related product rules") 
    ): Upsells @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Marketing\\Upsells") @doc(description:"Array of related product rules")
    widgets(
        identifiers: [String] @doc(description: "Titles or IDs of widgets") 
    ): Widgets @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\Widgets") @doc(description:"Array of widgets")
    adminRoles(
        identifiers: [String] @doc(description: "Role names") 
    ): AdminRoles @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\AdminUsers\\AdminRoles") @doc(description:"Array of Admin Roles and settings")
    adminUsers(
        identifiers: [String] @doc(description: "Admin Users") 
    ): AdminUsers @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\AdminUsers\\AdminUsers") @doc(description:"Array of Admin Users")
    dataInstallerStoreSettings(
        restrictProductsFromViews: String @doc(description: "Optional Y or N. Importer will default to Y") 
        productImageImportDirectory: String @doc(description: "Optional. Do not include if its not used. Path from server root to directory where images should be read during product import. Defaults to data pack directory\\media\\products") 
        productValidationStrategy: String @doc(description: "Optional. Do not include if its not used. values = validation-stop-on-errors,validation-skip-errors. Importer will default to validation-skip-errors.") 
    ): DataInstallerStoreSettings @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Settings") @doc(description:"Default Store Settings")
    dynamicBlocksExport(
        identifiers: [String] @doc(description: "Names or Ids of dynamic blocks") 
    ): DynamicBlocks @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\DynamicBlocks") @doc(description:"Array of Dynamic Blocks")
    pageBuilderTemplates(
        identifiers: [String] @doc(description: "Names or Ids of templates") 
    ): PageBuilderTemplates @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\Templates") @doc(description:"Array of Page Builder templates")
    companies(
        identifiers: [String] @doc(description: "Names or IDS of the Companies")
    ): Companies @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\Company") @doc(description: "Get List of Companies.")
    publicSharedCatalog: PublicSharedCatalog @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\PublicSharedCatalog") @doc(description: "Public or default Shared catalog")
    productExport(
        categoryIds: [String] @doc(description: "List of Category Ids to export products from")
    ): Export @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Export\\ProductExport") @doc(description:"csv encoded to json array of exported product data")
    customerExport(
        email: [String] @doc(description: "Email address to export. Can only take a single email.")
    ): Export @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Export\\CustomerExport") @doc(description:"csv encoded to json array of exported customer data")
    customerAddressExport: Export @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Export\\CustomerAddressExport") @doc(description:"csv encoded to json array of exported customer addresses")
    stockSourcesExport(
        sourceCode: [String] @doc(description: "List of source code to export inventory from")
    ): Export @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Export\\StockSourcesExport") @doc(description:"csv encoded to json array of stock sources data")
    advancedPricingExport(
        categoryIds: [String] @doc(description: "List of Category Ids to export product pricing from")
    ): Export @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Export\\AdvancedPricingExport") @doc(description:"csv encoded to json array of pricing data")
    storeConfigurations(
        additionalSettings: [String] @doc(description: "Optional: Additional store configurations to return expressed as path value from core_config_data table. Example: web/secure/base_url")
    ): StoreConfigurations @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Configurations") @doc(description:"Store Admin Configuration Settings")
    imagesExtract(
        categoryIds: String @doc(description: "Product Category Ids to extract images from. Comma separated list of category ids. Example: 1,2,3")
        blockIds: String @doc(description: "Comma separated list of block ids to extract images from. Example: 1,2,3")
        dynamicBlockIds: String @doc(description: "Comma separated list of dynamic block ids to extract images from. Example: 1,2,3")
        pageIds: String @doc(description: "Comma separated list of page ids to extract images from. Example: 1,2,3")
        templateIds: String @doc(description: "Comma separated list of template ids to retrieve thumbnail images for admin UI. Example: 1,2,3")
        cmsDir: String @doc(description: "Optional: Only include if you need to extract additional images not included in the existing blocks, pages, etc. Directory under media\\wysiwyg to extract images from. If left empty all wystwyg images will be extracted.")
    ): ImageZipFile @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Export\\ImageZipFile") @doc(description:"Get a zip file of images to include in a Data Pack")
    
    attributeList(
        entityType: [String] @doc(description: "catalog_product or customer")
    ): AttributeList @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Attribute\\AttributeList") @doc(description:"List of attributes")
    storeList: StoreList @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreList") @doc(description:"List of stores and their group and website")
 }

type Mutation {
  createDataInstallerJob(input: DataInstallerJobInput!): DataInstallerJobOutput
    @resolver(
      class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\DataInstall\\ScheduleJob"
    )@doc(description: "Launch installation of data pack. Also includes remote retrieval of data pack")
}

type StoreConfig {
    root_cateogry_name: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\RootCategoryName") @doc(description:"Name of Stores Root Category")
    theme: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Theme") @doc(description:"Path of the Store's Theme")
    theme_fallback: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Theme") @doc(description:"If a fallback theme is needed, the result will need to be edited manually")
}

type StoreConfigurations @doc(description: "Misc configuration settings that are set via the store admin"){
    items: [StoreConfiguration] 
}

type StoreConfiguration {
    path: String
    scope: String
    scope_code: String
    value: String
}

type AttributeList @doc(description: "List of custom attributes that are set via the store admin"){
    items: [AttributeListItem] 
}

type AttributeListItem {
    attribute_code: String
    default_label: String
    scope: String
    is_user_defined: String
    is_core: Boolean
}

type StoreList @doc(description: "List of stores and their group and website"){
    items: [StoreListListItem] 
}

type StoreListListItem {
    store_code: String
    store_name: String
    group_code: String
    group_name: String
    website_code: String
    website_name: String
}

interface CategoryInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\CategoryInterfaceTypeResolver") {
    custom_design_theme: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\CustomDesign") @doc(description:"Path of the Theme")
    landing_page_identifier: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\LandingPage") @doc(description:"identifier of landing page")
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    name_path: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\NamePath") @doc(description:"path by name excluding root, parent and self")
    category_name: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\CategoryName") @doc(description:"name with path delimiter escaped")
    page_layout: String
    custom_design: String
    is_active: Boolean
}

type CmsBlock {
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    block_content: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\BlockContent") @doc(description:"raw block content")
    block_id: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\BlockId") @doc(description:"Returns given id")
}

type CmsPages @doc(description: "CMS pages information") {
    retain_store_scope: String  @doc(description: "If true, will return store_view_code as set for the page. If false, it will set to the store_view_code of the request. Default is false.")
    items: [CmsPage] @doc(description: "An array of CMS pages")
}

type CmsPage {
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode") @doc(description:"Deprecated. Will be used only if page_in_websites is not defined. Or could be used if you want to override page_in_website")
    page_content: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\PageContent") @doc(description:"raw page content")
    page_id: Int @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\PageId") @doc(description:"Returns given id")
}

type CartRules @doc(description: "Retrieves all requested Cart Rules") {
    items: [CartRule] @doc(description: "An array containing the cart rules")
}

type CartRule {
    site_code: String
    customer_group: String
    name: String
    description: String
    uses_per_customer: Int
    stop_rules_processing: Int
    is_advanced: Int
    sort_order: Int
    simple_action: String
    discount_amount: String
    discount_qty: String
    discount_step: String
    apply_to_shipping: Int
    times_used: Int
    is_rss: Int
    coupon_type: String
    use_auto_generation: Int
    uses_per_coupon: Int
    simple_free_shipping: Int
    coupon_code: String
    reward_points_delta: String
    conditions_serialized: String
    actions_serialized: String
    rule_id: Int
    sort_order: Int
    is_active: Int
}

type ApprovalRules @doc(description: "Retrieves all requested B2B Approval Rules") {
    items: [ApprovalRule] @doc(description: "An array containing the rules")
}

type ApprovalRule {
    name: String
    description: String
    is_active: String
    apply_to_roles: String @doc(description: "Comma delimited list of roles to apply the rule to. This includes any custom company roles created, along with Default User") 
    conditions_serialized: String
    approval_from: String @doc(description: "Comma delimited list of approval roles. This includes any custom company roles created, along with Default User,Company Administrator and Purchaser's Manager")
    requires_manager_approval: String
    requires_admin_approval: String
    applies_to_all: String
    created_by: String
}

type CatalogRules @doc(description: "Retrieves all requested Catalog Rules") {
    items: [CatalogRule] @doc(description: "An array containing the catalog rules")
}

type CatalogRule {
    site_code: String
    customer_groups: String
    name: String
    description: String
    conditions_serialized: String
    actions_serialized: String
    stop_rules_processing: Int
    sort_order: Int
    simple_action: String
    discount_amount: Float
    dynamic_blocks: String
    is_active: Int
    rule_id: Int
}

type CustomerGroups @doc(description: "Retrieves all requested Customer Groups") {
    items: [CustomerGroup] @doc(description: "An array containing the customer group")
}

type CustomerGroup {
    name: String
    tax_class: String
}

type CustomerSegments @doc(description: "Retrieves all requested Customer Segments") {
    items: [CustomerSegment] @doc(description: "An array containing the customer segments")
}

type CustomerSegment {
    site_code: String
    name: String
    description: String
    conditions_serialized: String
    apply_to: String @doc(description: "2= Apply to Visitors, 1= Apply to Registered Users, 0= Both Visitors and Registered")
}

type PageBuilderTemplate {
    name: String
    created_for: String
    preview_image: String
    content: String
    template_id: Int
}

type PageBuilderTemplates @doc(description: "Retrieves all requested Page Builder templates") {
    items: [PageBuilderTemplate] @doc(description: "An array containing the page builder templates")
}


type MsiSources @doc(description: "Retrieves all requested Msi Sources") {
    items: [MsiSource] @doc(description: "An array containing the Msi Sources")
}

type MsiSource {
    source_code: String @doc(description: "Unique code of the source")
    name: String @doc(description: "Name as shown in admin")
    enabled: Int 
    description: String
    latitude: String @doc(description: "Required if used as pickup location")
    longitude: String @doc(description: "Required if used as pickup location")
    region_id: Int
    country_id: String
    city: String 
    street: String 
    postcode: String
    contact_name: String
    email: String
    phone: String
    fax: String
    use_default_carrier_config: Int
    is_pickup_location_active: Int
    frontend_name: String @doc(description: "Name as shown on storefront")
    frontend_description: String @doc(description: "Description shown on storefront")
}

type MsiStocks @doc(description: "Retrieves all requested Msi Stocks") {
    items: [MsiStock] @doc(description: "An array containing the Msi Stock")
}

type MsiStock {
    stock_name: String @doc(description: "Name as shown in admin")
    site_code: String  @doc(description: "List of site codes")
    source_code: String  @doc(description: "List of source codes to assign to the stock")
}


type CustomerSegments @doc(description: "Retrieves all requested Customer Segments") {
    items: [CustomerSegment] @doc(description: "An array containing the customer segments")
}

type StorefrontProperties{
    is_pagebuilder_enabled: String
}

type DataIntstallerLog @doc(description: "Retrieves all records from a Data install Job") {
    log_records: [DataInstallerLogRecord] @doc(description: "An array containing the log entries from a data install job")
}

type DataIntstallerJobStatus @doc(description: "Retrieves status information Data install Job") {
    job_status_text: String @doc(description: "Status Id")
    job_status: String @doc(description: "Current status of job")
}

type ImageZipFile @doc(description: "Retrieves a zip file containing all images for a product") {
    zip_file_download: String @doc(description: "Zip file with images in Data Pack directory structure")
    zip_file_server_path: String @doc(description: "Server path to zip file")
}

type DataInstallerLogRecord {
    job_id: String @doc(description: "Ids of job if added via scheduled job")
    datapack: String @doc(description: "Path to data pack")
    level: String @doc(description: "Type of message: info, warning or error")
    message: String @doc(description: "Information from installer")
    add_date: String @doc(description: "Timestamp when record was added")
}

type DataInstallerJobOutput {
  job_id: String
}

type RemoteDataPackOutput {
  job_id: String @doc(description: "Id of job scheduled to load data pack")
  status: String @doc(description: "Status of data pack retrieval, not installation")
  message: String @doc(description: "Message from data pack retrieval, not installation")
}

input DataInstallerJobInput @doc(description: "datapack only required value") {
  datapack: String @doc(description: "Required: Name of module or path to Data Pack if local. Url to Data Pack if remote")
  load: String @doc(description: "Optional: Subdirectory of data to load")
  files: String @doc(description: "Optional: Comma delimited list of file so load")
  host: String @doc(description: "Optional: Override for host value in stores file")
  reload: Boolean @doc(description: "Optional: true if reloading an already installed Data Pack")
  is_default_website: Boolean @doc(description: "Optional: true if you want the website loaded to be set as the default")
  auth_token: String @doc(description: "Token to include with request for remote Data Pack if required e.g. GitHub access token") 
  is_remote: Boolean @doc(description: "Set to true if using remote data pack") 
}

type Attribute {
     admin_properties: AdminProperties @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Attribute\\AdminProperties") 
     @doc(description: "Contains details about the admin settings configured for the attribute")
     store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
}

type AdminProperties {
    attribute_set: String
    frontend_label: String
    is_visible: Int
    is_searchable: Int
    is_comparable: Int
    is_html_allowed_on_front: Int
    is_used_for_price_rules: Int
    used_for_sort_by: Int
    is_visible_in_advanced_search: Int
    is_wysiwyg_enabled: Int
    is_used_for_promo_rules: Int
    is_required_in_admin_store: Int
    is_used_in_grid: Int
    is_visible_in_grid: Int
    is_filterable_in_grid: Int
    search_weight: Int
    is_pagebuilder_enabled: Int
    additional_data: String
    is_required: Int
    is_used_for_customer_segment: Int  @doc(description: "Used in Customer Attributes") 
    sort_order: Int  @doc(description: "Used in Customer Attributes") 
    used_in_forms: String  @doc(description: "Used in Customer Attributes") 
}

type AttributeOption {
    swatch_value: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Attribute\\SwatchValue")
}

type RewardPointsRateList @doc(description: "Retrieves all requested Rewards Exchange Rates") {
    items: [RewardPointsRate]
}

type RewardPointsRate {
    site_code: String @doc(description:"Single site code or comma delimited list")
    customer_group: String @doc(description:"Single group name or comma delimited list")
    direction: String @doc(description:"points_to_currency or currency_to_points")
}

type Upsells @doc(description: "Retrieves all requested Related Product Rules") {
    items: [Upsell] @doc(description: "An array containing the Related Product Rules")
}

type Upsell {
    name: String
    conditions_serialized: String
    actions_serialized: String
    positions_limit: Int
    apply_to: String
    sort_order: Int
    customer_segments: String
    is_active: Int
    rule_id: Int
}

type Widgets @doc(description: "Retrieves all requested Widgets") {
    items: [Widget] @doc(description: "An array containing the Widgets")
}

type Widget {
    title: String
    instance_type: String
    theme: String  @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Theme") @doc(description:"Path of the Store's Theme")
    store_view_code: String
    widget_parameters: String
    sort_order: Int
    page_group: String
    layout_handle: String
    block_reference: String
    page_for: String
    entities: String
    page_template: String
    ui_type: String
    widget_id: Int
}

type AdminRoles @doc(description: "Retrieves all requested Roles and settings") {
    items: [AdminRole] @doc(description: "An array containing individual settings")
}

type AdminRole {
    role: String
    resource_id: String
}

type AdminUsers @doc(description: "Retrieves all requested Admin Users and attributes") {
    items: [AdminUser] @doc(description: "An array containing individual users data")
}

type AdminUser {
    email: String
    username: String
    password: String @doc(description:"As passwords cannot be decoded, it will return a static value of 'Password1'")
    firstname: String
    lastname: String
    role: String
}

type DataInstallerStoreSettings {
    site_code: String
    store_code: String
    store_view_code: String
    restrict_products_from_views: String @doc(description:"Optional. Will return Y if not defined")
    product_image_import_directory: String @doc(description:"Optional. Do not include unless overiding")
    product_validation_strategy: String @doc(description:"Optional - default validation-skip-errors. Defined values are validation-stop-on-errors,validation-skip-errors")
}

type DynamicBlock {
    name: String
    segments: String
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    type: String
    banner_content: String
    banner_id: Int
    is_enabled: Int
    ui_type: String
}

type Companies @doc(description: "List of Companies") {
    items: [Company] @doc(description: "Array of information about the requested companies")
}

type Company {
    credit_export: CompanyCreditExport! @resolver(class: "MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\Credit") @doc(description: "Company credit balance")
    credit_history(filter: CompanyCreditHistoryFilterInput, pageSize: Int = 20, currentPage: Int = 1): CompanyCreditHistory! @resolver(class: "Magento\\CompanyCreditGraphQl\\Model\\Resolver\\CreditHistory") @doc(description: "Company credit operations history")
    roles_export(
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. Defaults to 20"),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1"),
    ): CompanyRoles! @resolver(class: "MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\Roles") @doc(description: "Returns the list of company roles")
    users_export(
        filter: CompanyUsersFilterInput @doc(description: "Defines the type of company users to return"),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. Defaults to 20"),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1"),
    ): CompanyUsers @resolver(class: "MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\Users") @doc(description: "Returns a list of company users based on activity status")
    site_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\SiteCode")
    shared_catalog: SharedCatalog! @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\SharedCatalog") @doc(description: "Shared catalog assigned to the company")
    approval_rules: ApprovalRules @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\ApprovalRules") @doc(description: "Get List of B2B Approval Rules.")
}

type PublicSharedCatalog {
    name: String  @doc(description: "Name of Catalog")
    type: String  @doc(description: "Public or Custom")
    description: String
    categories: [SharedCatalogCategories] @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\SharedCatalogCategories") @doc(description: "Array of categories assigned to a shared catalog")
}

type SharedCatalog {
    name: String  @doc(description: "Name of Catalog")
    type: String  @doc(description: "Public or Custom")
    description: String
    categories: [SharedCatalogCategories] @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\SharedCatalogCategories") @doc(description: "Array of categories assigned to a shared catalog")
}

type SharedCatalogCategories {
    path: String @doc(description: "Path of category to assign to shared catalog")
}

type CompanyCreditExport {
    outstanding_balance: Money! @doc(description: "Outstanding company credit")
    available_credit: Money! @doc(description: "Available company credit")
    credit_limit: Money! @doc(description: "Company credit limit")
}

type CompanySalesRepresentative {
    username: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\SalesRep") @doc(description: "Company Sales Rep's Username")
    role: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Company\\SalesRep") @doc(description: "Company Sales Rep's User Role")
    placeholder_password: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\PlaceholderPassword") @doc(description: "Company Sales Rep default password 'Password1'")
}

type Customer {
    placeholder_password: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\PlaceholderPassword") @doc(description: "Company Sales Rep default password 'Password1'")
    add_to_autofill: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\AddToAutofill") @doc(description: "Populate customer's data in the Autofill extension")
        requisition_lists_export(
        pageSize: Int = 20,
        currentPage: Int = 1,
        filter: RequisitionListFilterInput
    ): RequisitionListsExport @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\RequisitionList") @doc(description: "Contains the customer's requisition lists")

}

type RequisitionListsExport @doc(description: "Defines customer requisition lists")  {
    items: [RequisitionList] @doc(description: "An array of requisition lists")
    page_info: SearchResultPageInfo @doc(description: "Contains pagination metadata")
    total_count: Int @doc(description: "The number of returned requisition lists")
}

type Export {
    data: String
}

interface ProductInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\ProductInterfaceTypeResolverComposite"){
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
}